// Generated by CoffeeScript 1.6.3
(function() {
  var BNP, NEW, TRM, XRE, alert, badge, debug, echo, help, info, log, njs_fs, rainbow, rpr, source, warn, whisper, write, π;

  njs_fs = require('fs');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '﴾8-character﴿';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  π = require('coffeenode-packrattle');

  BNP = require('coffeenode-bitsnpieces');

  NEW = require('./NEW');

  XRE = require('./9-xre');

  write = function(route, content) {
    return njs_fs.writeFileSync(route, content);
  };

  this.phrase = (π.alt((function(_this) {
    return function() {
      whisper('phrase');
      return π.regex(/[^(|)]+/);
    };
  })(this))).onMatch(function(match) {
    var R;
    R = ['phrase', match[0]];
    whisper(R);
    return R;
  });

  this.bracketed = (π.alt((function(_this) {
    return function() {
      whisper('bracketed');
      return π.seq('(', π.repeat(_this.expression), ')');
    };
  })(this))).onMatch(function(match) {
    var R;
    R = ['bracketed', match[0], match[1], match[2]];
    whisper(R);
    return R;
  });

  this.expression = π.alt((function(_this) {
    return function() {
      whisper('expression');
      return π.alt((function() {
        return _this.bracketed;
      }), (function() {
        return _this.phrase;
      }));
    };
  })(this));

  source = "(xxx)";

  source = "(A(B)C)";

  source = "(xxx(yyy(zzz))aaa)";

  this.main = function() {
    var parse_info;
    parse_info = π.parse(this.expression, source, {
      debugGraph: true
    });
    if (parse_info['ok']) {
      return info(parse_info['match']);
    } else {
      warn(parse_info['message'] + '\n' + parse_info['state'].toSquiggles().join('\n'));
      return write("/tmp/process.dot", parse_info['state'].debugGraphToDot());
    }
  };

  this._write_graphs = function() {
    var grammar, name, _i, _len, _ref, _results;
    _ref = 'expression phrase bracketed'.split(/\s+/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      grammar = this[name];
      _results.push(write("/tmp/" + name + ".dot", grammar.toDot()));
    }
    return _results;
  };

  this.main();

}).call(this);
