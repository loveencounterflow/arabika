// Generated by CoffeeScript 1.6.3
(function() {
  var $new, CHR, NUMBER, TEXT, TRM, XRE, alert, badge, debug, echo, help, info, log, rpr, warn, whisper, ƒ;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '﴾1-base﴿';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  ƒ = require('flowmatic');

  $new = ƒ["new"];

  CHR = require('./3-chr');

  NUMBER = require('./4-number');

  TEXT = require('./2-text');

  XRE = require('./9-xre');

  this.$ = {
    'symbol-sigil': ':',
    'use-keyword': 'use'
  };


  /* TAINT `ƒ.or` is an expedient here */

  this.$_symbol_sigil = ƒ.or((function(_this) {
    return function() {
      return ƒ.string(_this.$['symbol-sigil']);
    };
  })(this));

  this.symbol = (ƒ.seq(this.$_symbol_sigil, CHR.nws)).onMatch((function(_this) {
    return function(match) {
      var raw, sigil, value, _ref;
      sigil = match[0], (_ref = match[1], raw = _ref.raw, value = _ref.value);
      return $new.literal('symbol', sigil + raw, value);
    };
  })(this));


  /* TAINT `ƒ.or` is an expedient here */

  this.$_use_keyword = ƒ.or((function(_this) {
    return function() {
      return ƒ.string(_this.$['use-keyword']);
    };
  })(this));

  this.use_argument = ƒ.or(this.symbol, NUMBER.digits, TEXT.literal);

  this.use_statement = (ƒ.seq(this.$_use_keyword, CHR.ilws, this.use_argument)).onMatch((function(_this) {
    return function(match) {
      var keyword, raw, value, _ref;
      keyword = match[0], (_ref = match[1], raw = _ref.raw, value = _ref.value);
      return $new.x_use_statement(keyword, raw);
    };
  })(this));

  this.$TESTS = {
    '_symbol_sigil: is a single character': function(test) {
      var TYPES;
      TYPES = require('coffeenode-types');
      test.ok(TYPES.isa_text(this.$['symbol-sigil']));
      return test.ok(this.$['symbol-sigil'].length === 1);
    },
    'symbol: accepts sequences of [ symbol-sigil, nws ]': function(test) {
      var probe, probes, sigil, _i, _len, _results;
      sigil = this.$['symbol-sigil'];
      probes = ["" + sigil + "x", "" + sigil + "foo", "" + sigil + "Supercalifragilisticexpialidocious"];
      _results = [];
      for (_i = 0, _len = probes.length; _i < _len; _i++) {
        probe = probes[_i];
        _results.push(test.eq(this.symbol.run(probe), $new.literal('symbol', probe, probe.slice(1))));
      }
      return _results;
    },
    'use_argument: accepts symbols, digits, strings': function(test) {
      var probe, probes_and_results, result, sigil, _i, _len, _ref, _results;
      sigil = this.$['symbol-sigil'];
      probes_and_results = [["" + sigil + "x", $new.literal('symbol', "" + sigil + "x", "x")], ["" + sigil + "foo", $new.literal('symbol', "" + sigil + "foo", "foo")], ["12349876", $new.literal('digits', "12349876", "12349876")], ["'some text'", $new.literal('text', "'some text'", "some text")], ['"other text"', $new.literal('text', '"other text"', 'other text')]];
      _results = [];
      for (_i = 0, _len = probes_and_results.length; _i < _len; _i++) {
        _ref = probes_and_results[_i], probe = _ref[0], result = _ref[1];
        _results.push(test.eq(this.use_argument.run(probe), result));
      }
      return _results;
    },
    'use_statement: accepts symbols, digits, strings': function(test) {
      var keyword, probe, probes_and_results, result, sigil, _i, _len, _ref, _results;
      sigil = this.$['symbol-sigil'];
      keyword = this.$['use-keyword'];
      probes_and_results = [["use " + sigil + "x", $new.x_use_statement(keyword, "" + sigil + "x", "x")], ["use " + sigil + "foo", $new.x_use_statement(keyword, "" + sigil + "foo", "foo")], ["use 12349876", $new.x_use_statement(keyword, "12349876", "12349876")], ["use 'some text'", $new.x_use_statement(keyword, "'some text'", "some text")], ['use "other text"', $new.x_use_statement(keyword, '"other text"', 'other text')]];
      _results = [];
      for (_i = 0, _len = probes_and_results.length; _i < _len; _i++) {
        _ref = probes_and_results[_i], probe = _ref[0], result = _ref[1];
        _results.push(test.eq(this.use_statement.run(probe), result));
      }
      return _results;
    },
    'use_statement: compilation to JS': function(test) {
      var keyword, probe, probes_and_results, result, sigil, _i, _len, _ref, _results;
      sigil = this.$['symbol-sigil'];
      keyword = this.$['use-keyword'];
      probes_and_results = [["use " + sigil + "x", "/* use ':x' */"], ["use " + sigil + "foo", "/* use ':foo' */"], ["use 12349876", "/* use '12349876' */"], ["use 'some text'", "/* use '\\'some text\\'' */"], ['use "other text"', "/* use '\"other text\"' */"]];
      _results = [];
      for (_i = 0, _len = probes_and_results.length; _i < _len; _i++) {
        _ref = probes_and_results[_i], probe = _ref[0], result = _ref[1];
        _results.push(test.eq(test.as_js(this.use_statement.run(probe)), result));
      }
      return _results;
    }
  };

}).call(this);
