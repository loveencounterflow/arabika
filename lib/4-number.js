// Generated by CoffeeScript 1.7.1
(function() {
  var $new, TRM, alert, badge, debug, echo, help, info, log, rpr, warn, whisper, ƒ;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '﴾4-number﴿';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  ƒ = require('flowmatic');

  $new = ƒ["new"];

  this.digits = (ƒ.regex(/[0-9]+/)).onMatch((function(_this) {
    return function(match) {
      return $new.literal('digits', match[0], match[0]);
    };
  })(this));


  /* TAINT `ƒ.or` is an expedient here */

  this.integer = (ƒ.or(this.digits)).onMatch((function(_this) {
    return function(match) {
      match['x-subtype'] = 'integer';
      match['value'] = parseInt(match['raw'], 10);
      return match;
    };
  })(this));

  this.literal = ƒ.or(this.integer);

  this.$TESTS = {
    'digits: parses sequences of ASCII digits': function(test) {
      var probe, _i, _len, _ref, _results;
      _ref = "0 12 7 1928374 080".split(/\s+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        probe = _ref[_i];
        _results.push(test.eq(this.digits.run(probe), $new.literal('digits', probe, probe)));
      }
      return _results;
    },
    'digits: does not parse sequences with non-digits (1)': function(test) {
      var probe, _i, _len, _ref, _results;
      _ref = "0x 1q2 7# 192+8374 08.0".split(/\s+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        probe = _ref[_i];
        _results.push(test.throws(((function(_this) {
          return function() {
            return _this.digits.run(probe);
          };
        })(this)), /Expected end/));
      }
      return _results;
    },
    'digits: does not parse sequences with non-digits (2)': function(test) {
      var probe, _i, _len, _ref, _results;
      _ref = "q192 +3 -42".split(/\s+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        probe = _ref[_i];
        _results.push(test.throws(((function(_this) {
          return function() {
            return _this.digits.run(probe);
          };
        })(this)), /Expected \/\[0-9\]\+\//));
      }
      return _results;
    },
    'integer: parses sequences of ASCII digits': function(test) {
      var probe, _i, _len, _ref, _results;
      _ref = "0 12 7 1928374 080".split(/\s+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        probe = _ref[_i];
        _results.push(test.eq(this.integer.run(probe), $new.literal('integer', probe, parseInt(probe, 10))));
      }
      return _results;
    },
    'number: recognizes integers': function(test) {
      var probe, _i, _len, _ref, _results;
      _ref = "0 12 7 1928374 080".split(/\s+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        probe = _ref[_i];
        _results.push(test.eq(this.literal.run(probe), $new.literal('integer', probe, parseInt(probe, 10))));
      }
      return _results;
    }
  };

}).call(this);
