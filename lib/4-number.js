// Generated by CoffeeScript 1.6.3
(function() {
  var NEW, test, π;

  π = require('coffeenode-packrattle');

  NEW = require('./NEW');

  this.TESTS = {};

  test = NEW.test();

  this.digits = (π.regex(/[0-9]+/)).onMatch((function(_this) {
    return function(match) {
      return NEW.literal(match[0], match[0]);
    };
  })(this));

  this.TESTS['digits: parses sequences of ASCII digits'] = function() {
    var probe, _i, _len, _ref, _results;
    _ref = "0 12 7 1928374 080".split(/\s+/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      probe = _ref[_i];
      _results.push(test.eq(this.digits.run(probe), NEW.literal(probe, probe)));
    }
    return _results;
  };

  this.TESTS['digits: does not parse sequences with non-digits (1)'] = function() {
    var probe, _i, _len, _ref, _results;
    _ref = "0x 1q2 7# 192+8374 08.0".split(/\s+/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      probe = _ref[_i];
      _results.push(test.throws(((function(_this) {
        return function() {
          return _this.digits.run(probe);
        };
      })(this)), /Expected end/));
    }
    return _results;
  };

  this.TESTS['digits: does not parse sequences with non-digits (2)'] = function() {
    var probe, _i, _len, _ref, _results;
    _ref = "q192 +3 -42".split(/\s+/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      probe = _ref[_i];
      _results.push(test.throws(((function(_this) {
        return function() {
          return _this.digits.run(probe);
        };
      })(this)), /Expected \/\[0-9\]\+\//));
    }
    return _results;
  };


  /* TAINT `π.alt` is an expedient here */

  this.integer = (π.alt(this.digits)).onMatch((function(_this) {
    return function(match) {
      match['value'] = parseInt(match['raw'], 10);
      return match;
    };
  })(this));

  this.TESTS['integer: parses sequences of ASCII digits'] = function() {
    var probe, _i, _len, _ref, _results;
    _ref = "0 12 7 1928374 080".split(/\s+/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      probe = _ref[_i];
      _results.push(test.eq(this.integer.run(probe), NEW.literal(probe, parseInt(probe, 10))));
    }
    return _results;
  };

  this.number = π.alt(this.digits);

}).call(this);
