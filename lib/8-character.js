// Generated by CoffeeScript 1.6.3

/*

Potentially useful character classes:

* from within 7bit US ASCII:
  * any letter;
  * any digit;
  * any punctuation;
  * any single whitespace character;
  * any single linear whitespace character;
  * any single non-whitespace / printing character;
  * space (i.e. U+0020);

* from within 21bit (a.k.a. 32bit) Unicode (v6.3):
  * any single character, be it ASCII, from the Astral Planes, whitespace, newline, whatever;
  * any single non-whitespace / printing character;
  * any digit;
  * any letter;
  * any character except ASCII punctuation;
  * any newline character (zero or more characters that are line endings, including implied EOF);
  * more?
 */

(function() {
  var BNP, NEW, TRM, XRE, alert, badge, debug, echo, help, info, log, rainbow, rpr, warn, whisper, π;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '﴾8-character﴿';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  π = require('coffeenode-packrattle');

  BNP = require('coffeenode-bitsnpieces');

  NEW = require('./NEW');

  XRE = require('./9-xre');

  this.$_constants = {
    'ascii-punctuation': "-!\"#%&'()*,./:;?@[\\]_{}"
  };


  /* TAINT `π.alt` is an expedient here */


  /* TAINT no memoizing */

  this.$_ascii_punctuation = π.alt((function(_this) {
    return function() {
      return π.regex(XRE('[' + (XRE.$_esc(_this.$_constants['ascii-punctuation'])) + ']'));
    };
  })(this));

  this.$_chr = (π.regex(XRE('.', 'Qs'))).onMatch(function(match) {
    return match[0];
  });


  /* TAINT `π.alt` is an expedient here */

  this.chr = (π.alt(this.$_chr)).onMatch(function(match) {
    return NEW.literal('chr', match, match);
  });

  this.TESTS = {
    '$chr: matches code points (instead of code units) and newlines': function(test) {
      test.eq(this.$_chr.run('x'), 'x');
      test.eq(this.$_chr.run('\r'), '\r');
      test.eq(this.$_chr.run('\n'), '\n');
      return test.eq(this.$_chr.run('𠀝'), '𠀝');
    },
    'chr: matches code points (instead of code units) and newlines': function(test) {
      test.eq(this.chr.run('x'), NEW.literal('chr', 'x', 'x'));
      test.eq(this.chr.run('\r'), NEW.literal('chr', '\r', '\r'));
      test.eq(this.chr.run('\n'), NEW.literal('chr', '\n', '\n'));
      return test.eq(this.chr.run('𠀝'), NEW.literal('chr', '𠀝', '𠀝'));
    },
    '$chr: accepts single character, be it one or two code units': function(test) {
      var probe, probes_and_results, result, _i, _len, _ref, _results;
      probes_and_results = [['0', '0'], ['q', 'q'], ['中', '中'], ['𠀝', '𠀝']];
      _results = [];
      for (_i = 0, _len = probes_and_results.length; _i < _len; _i++) {
        _ref = probes_and_results[_i], probe = _ref[0], result = _ref[1];
        _results.push(test.eq(this.$_chr.run(probe), result));
      }
      return _results;
    },
    '$chr: rejects more than a single character': function(test) {
      var probe, probes, _i, _len, _results;
      probes = ['01', 'qwertz', '中中', '𠀝x'];
      _results = [];
      for (_i = 0, _len = probes.length; _i < _len; _i++) {
        probe = probes[_i];
        _results.push(test.throws(((function(_this) {
          return function() {
            return _this.$_chr.run(probe);
          };
        })(this)), /Expected end/));
      }
      return _results;
    },
    '$ascii_punctuation: rejects anything but ASCII punctuation': function(test) {
      var probe, probes, _i, _len, _results;
      probes = ['a', '', '中', '𠀁'];
      _results = [];
      for (_i = 0, _len = probes.length; _i < _len; _i++) {
        probe = probes[_i];
        _results.push(test.throws(((function(_this) {
          return function() {
            return _this.$_ascii_punctuation.run(probe);
          };
        })(this)), /Expected /));
      }
      return _results;
    }
  };

}).call(this);
