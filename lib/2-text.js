// Generated by CoffeeScript 1.6.3
(function() {
  var NEW, TRM, alert, badge, debug, echo, help, info, log, rainbow, rpr, warn, whisper, π;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '﴾1﴿';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  π = require('coffeenode-packrattle');

  NEW = require('./NEW');

  this._single_quote = π.string("'");

  this._double_quote = π.string('"');

  this._nosq = (π.alt(((function(_this) {
    return function() {
      return _this._escaped;
    };
  })(this)), /[^']+/)).onMatch(function(match) {
    return match[0];
  });

  this._nodq = (π.alt(((function(_this) {
    return function() {
      return _this._escaped;
    };
  })(this)), /[^"]+/)).onMatch(function(match) {
    return match[0];
  });

  this._chr_escaper = π.string('\\');

  this._unicode4_escape = π.string('u');

  this._sq_text_literal = π.seq(this._single_quote, this._nosq, this._single_quote);

  this._dq_text_literal = π.seq(this._double_quote, this._nodq, this._double_quote);


  /* TAINT maybe we should *not* un-escape anything; better for translation */

  this.literal = (π.alt(this._sq_text_literal, this._dq_text_literal)).onMatch((function(_this) {
    return function(match) {
      var ignore, value;
      ignore = match[0], value = match[1], ignore = match[2];
      return NEW.literal('text', match.join(''), value);
    };
  })(this));

  this.simple_escape = (π.regex(/[bfnrt]/)).onMatch((function(_this) {
    return function(match) {
      return _this._escape_table[match[0]];
    };
  })(this));

  this._escape_table = {
    b: '\b',
    f: '\f',
    n: '\n',
    r: '\r',
    t: '\t'
  };


  /* TAINT String conversion method dubious; will fail outside of Unicode BMP */

  this._unicode_hex = (π.seq(this._unicode4_escape, /[0-9a-fA-F]{4}/)).onMatch((function(_this) {
    return function(match) {
      return String.fromCharCode('0x' + match[1]);
    };
  })(this));

  this._escaped = (π.seq(this._chr_escaper, π.alt(this.simple_escape, this._unicode_hex, /./))).onMatch((function(_this) {
    return function(match) {
      return match[1];
    };
  })(this));

}).call(this);
