// Generated by CoffeeScript 1.6.3

/*
 */

(function() {
  var $new, TRM, XRE, alert, badge, debug, echo, help, info, log, rainbow, rpr, warn, whisper, π,
    __slice = [].slice;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = '﴾0-bracketed-expressions﴿';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  π = require('coffeenode-packrattle');

  $new = require('./NEW');

  XRE = require('./9-xre');

  this.$ = {
    'opener': '⇩',
    'connector': '⇨',
    'closer': '⇧',
    'opener': '↳',
    'connector': '↦',
    'closer': '↱',

    /* other popular choices include:
    
     *.........................................................................................................
    'opener':             '↧'
    'connector':          '↦'
    'closer':             '↥'
     *.........................................................................................................
    'opener':             '￬'
    'connector':          '￫'
    'closer':             '￪'
     *.........................................................................................................
    'opener':             '⟦'
    'connector':          '∿'
    'closer':             '⟧'
     */
    'indentation-chr': ' ',
    'chrs-per-level': 2,

    /* Maximum number of steps that positive indents may progress;
    set to 1 to allow standard single-step indentation (as in Python and CoffeeScript),
    set to e.g. 2 to allow 'unconventional' single and double-step indentation,
    set to Infinity to allow unlimited indentation deltas,
    set to 0 to disallow indentation altogether:
     */
    'delta': 1
  };

  this.$new = $new["new"](this);


  /* TAINT must parameterize */

  this.$new.$_indentation = function(G, $) {
    var R;
    R = π.alt(function() {
      return π.repeat(' ');
    });
    R = R.onMatch(function(match) {
      return match.join('');
    });
    return R;
  };


  /* TAINT naive line ending */

  this.$new.$_raw_indented_material_line = function(G, $) {
    var R;
    R = π.alt(function() {
      return π.seq(G.$_indentation, /.+/, π.optional('\n'));
    });
    R = R.onMatch(function(match) {
      return [match[0], match[1][0], match[2]];
    });
    return R;
  };


  /* TAINT must parameterize */

  this.$new.$_raw_blank_line = function(G, $) {
    var R;
    R = π.regex(/([\x20\t]+)(\n|$)/);
    return R = R.onMatch(function(match) {
      return ['', match[1], match[2]];
    });
  };

  this.$new.$_raw_line = function(G, $) {
    return π.alt((function() {
      return G.$_raw_blank_line;
    }), (function() {
      return G.$_raw_indented_material_line;
    }));
  };

  this.$new.$_raw_lines = function(G, $) {
    return π.repeat(function() {
      return G.$_raw_line;
    });
  };


  /* TAINT must escape occurrences of meta-chrs in source */


  /* TAINT should use parser state to indicate error locations */

  this.$new.$_as_bracketed = function(G, $) {
    var R;
    R = function(source) {
      var base_raw_level, chrs_per_level, current_raw_level, delta, dents, ending, indentation, level, line, line_idx, lines, material, max_indent_chrs, raw_level, _i, _len;
      lines = G.$_raw_lines.run(source);
      R = [];
      chrs_per_level = $['chrs-per-level'];
      delta = $['delta'];
      max_indent_chrs = delta * chrs_per_level;
      base_raw_level = -chrs_per_level;
      current_raw_level = base_raw_level;
      for (line_idx = _i = 0, _len = lines.length; _i < _len; line_idx = ++_i) {
        line = lines[line_idx];
        indentation = line[0], material = line[1], ending = line[2];
        raw_level = indentation.length;
        level = raw_level / chrs_per_level;
        if (raw_level !== Math.floor(raw_level)) {
          throw new Error("inconsistent indentation (no multiple of " + chrs_per_level + " characters) on line #" + (line_idx + 1) + ":\n" + (rpr(line)));
        }
        if (raw_level > current_raw_level + max_indent_chrs) {
          throw new Error("inconsistent indentation (too deep) on line #" + (line_idx + 1) + ":\n" + (rpr(line)));
        }
        if (raw_level > current_raw_level) {
          dents = [];
          while (raw_level > current_raw_level) {
            current_raw_level += chrs_per_level;
            dents.push($['opener']);
          }
          R.push(dents.join(''));
        } else if (current_raw_level > raw_level) {
          dents = [];
          while (current_raw_level > raw_level) {
            current_raw_level -= chrs_per_level;
            dents.push($['closer']);
          }
          R.push(dents.join(''));
        } else {
          R.push($['connector']);
        }
        R.push(material);
      }

      /* TAINT code repetition */
      if (current_raw_level > base_raw_level) {
        dents = [];
        while (current_raw_level > base_raw_level) {
          current_raw_level -= chrs_per_level;
          dents.push($['closer']);
        }
        R.push(dents.join(''));
      }
      return R = R.join('');
    };
    return R;
  };

  this.$new.$bracketed = function(G, $) {
    var R;
    R = π.alt(function() {
      return π.seq($['opener'], π.repeat((function(_this) {
        return function() {
          return G.$suite;
        };
      })(this)), $['closer']);
    });
    R = R.onMatch(function(match) {
      return ['bracketed', match[0], match[1], match[2]];
    });
    return R;
  };

  this.$new.$phrases = function(G, $) {
    var R;
    R = π.alt(function() {
      return π.repeatSeparated(G.$phrase, RegExp("" + (XRE.$esc($['connector']))));
    });
    R = R.onMatch(function(match) {
      return ['phrases'].concat(__slice.call(match));
    });
    return R;
  };

  this.$new.$phrase = function(G, $) {
    var R, metachrs;
    metachrs = XRE.$esc($['opener'] + $['connector'] + $['closer']);
    R = π.alt(function() {
      return π.regex(RegExp("[^" + metachrs + "]+"));
    });
    R = R.onMatch(function(match) {
      return ['phrase', match[0]];
    });
    return R;
  };

  this.$new.$suite = function(G, $) {
    return π.alt(function() {
      return π.alt(G.$bracketed, G.$phrases);
    });
  };


  /* Run `@$new` to make `@` (`this`) an instance of this grammar with default options: */

  this.$new(this, null);

  this.$TESTS = {
    'bracketed: parses simple bracketed phrase': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(xxx)";
      return test.eq(G.$bracketed.run(source), ["bracketed", "(", [["phrases", ["phrase", "xxx"]]], ")"]);
    },
    'bracketed: parses nested bracketed phrase': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(A(B)C)";
      return test.eq(G.$bracketed.run(source), ["bracketed", "(", [["phrases", ["phrase", "A"]], ["bracketed", "(", [["phrases", ["phrase", "B"]]], ")"], ["phrases", ["phrase", "C"]]], ")"]);
    },
    'bracketed: parses multiply nested bracketed phrase': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(xxx(yyy(zzz))aaa)";
      return test.eq(G.$bracketed.run(source), ["bracketed", "(", [["phrases", ["phrase", "xxx"]], ["bracketed", "(", [["phrases", ["phrase", "yyy"]], ["bracketed", "(", [["phrases", ["phrase", "zzz"]]], ")"]], ")"], ["phrases", ["phrase", "aaa"]]], ")"]);
    },
    'bracketed: parses multiply nested bracketed phrase with connectors': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(xxx|www|333(yyy(zzz))aaa)";
      return test.eq(G.$bracketed.run(source), ["bracketed", "(", [["phrases", ["phrase", "xxx"], ["phrase", "www"], ["phrase", "333"]], ["bracketed", "(", [["phrases", ["phrase", "yyy"]], ["bracketed", "(", [["phrases", ["phrase", "zzz"]]], ")"]], ")"], ["phrases", ["phrase", "aaa"]]], ")"]);
    },
    'expression: parses simple bracketed phrase': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(xxx)";
      return test.eq(G.$suite.run(source), ["bracketed", "(", [["phrases", ["phrase", "xxx"]]], ")"]);
    },
    'expression: parses nested bracketed phrase': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(A(B)C)";
      return test.eq(G.$suite.run(source), ["bracketed", "(", [["phrases", ["phrase", "A"]], ["bracketed", "(", [["phrases", ["phrase", "B"]]], ")"], ["phrases", ["phrase", "C"]]], ")"]);
    },
    'expression: parses multiply nested bracketed phrase': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(xxx(yyy(zzz))aaa)";
      return test.eq(G.$suite.run(source), ["bracketed", "(", [["phrases", ["phrase", "xxx"]], ["bracketed", "(", [["phrases", ["phrase", "yyy"]], ["bracketed", "(", [["phrases", ["phrase", "zzz"]]], ")"]], ")"], ["phrases", ["phrase", "aaa"]]], ")"]);
    },
    'expression: parses multiply nested bracketed phrase with connectors': function(test) {
      var G, source;
      G = this.$new({
        opener: '(',
        connector: '|',
        closer: ')'
      });
      source = "(xxx|www|333(yyy(zzz))aaa)";
      return test.eq(G.$suite.run(source), ["bracketed", "(", [["phrases", ["phrase", "xxx"], ["phrase", "www"], ["phrase", "333"]], ["bracketed", "(", [["phrases", ["phrase", "yyy"]], ["bracketed", "(", [["phrases", ["phrase", "zzz"]]], ")"]], ")"], ["phrases", ["phrase", "aaa"]]], ")"]);
    },
    '$_raw_lines: turns indented source into list of triplets': function(test) {
      var G, lines, source;
      G = this;
      source = "f = ->\n  for x in xs\n    while x > 0\n      x -= 1\n      log x\n      g x\n  log 'ok'\n  log 'over'";
      lines = G.$_raw_lines.run(source);
      return test.eq(lines, [["", "f = ->", "\n"], ["  ", "for x in xs", "\n"], ["    ", "while x > 0", "\n"], ["      ", "x -= 1", "\n"], ["      ", "log x", "\n"], ["      ", "g x", "\n"], ["  ", "log 'ok'", "\n"], ["  ", "log 'over'", ""]]);
    },
    '$_as_bracketed: turns indented source into bracketed string': function(test) {
      var $, G, bracketed, result, source;
      G = this;
      $ = G['$'];
      source = "f = ->\n  for x in xs\n    while x > 0\n      x -= 1\n      log x\n      g x\n  log 'ok'\n  log 'over'";
      bracketed = G.$_as_bracketed(source);
      result = "⟦f = ->⟦for x in xs⟦while x > 0⟦x -= 1∿log x∿g x⟧⟧log 'ok'∿log 'over'⟧⟧";
      result = result.replace(/⟦/, $['opener']);
      result = result.replace(/⟧/, $['closer']);
      result = result.replace(/∿/, $['connector']);
      debug(bracketed);
      return test.eq(bracketed, result);
    },
    '$_as_bracketed (default G): disallow unconventional indentation': function(test) {
      var G, source;
      G = this;
      source = "f = ->\n    for x in xs\n  while x > 0\n    x -= 1\n    log x\n    g x\n  log 'ok'\n  log 'over'";
      return test.throws((function() {
        return G.$_as_bracketed(source);
      }), /inconsistent indentation \(too deep\) on line/);
    },
    '$_as_bracketed (custom G): allow unconventional indentation': function(test) {
      var $, G, bracketed, options, result, source;
      options = {
        'delta': Infinity
      };
      G = this.$new(options);
      $ = G['$'];
      source = "f = ->\n    for x in xs\n  while x > 0\n    x -= 1\n    log x\n    g x\n  log 'ok'\n  log 'over'";
      bracketed = G.$_as_bracketed(source);
      result = "⟦f = ->⟦⟦for x in xs⟧while x > 0⟦x -= 1∿log x∿g x⟧log 'ok'∿log 'over'⟧⟧";
      result = result.replace(/⟦/, $['opener']);
      result = result.replace(/⟧/, $['closer']);
      result = result.replace(/∿/, $['connector']);
      return test.eq(bracketed, result);
    },
    '$_as_bracketed (default G): disallow forbidden indentation-like chrs': function(test) {
      var G, source;
      G = this;
      source = "f = ->\n  for x in xs\n    \twhile x > 0\n      x -= 1\n      log x\n      g x\n  log 'ok'\n  log 'over'";
      return test.throws((function() {
        return G.$_as_bracketed(source);
      }), /XXXXXXXXXXXXX/);
    },
    '$_as_bracketed: normalize line endings': function(test) {
      throw new Error("not implemented");
    },
    '$_as_bracketed: warn where meta-chrs in raw source': function(test) {
      throw new Error("not implemented");
    }
  };

}).call(this);
